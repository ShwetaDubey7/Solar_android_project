// Generated by view binder compiler. Do not edit!
package com.solaro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.solaro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListItemMaintenanceBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton btnDeleteMaint;

  @NonNull
  public final MaterialButton btnUpdateMaintStatus;

  @NonNull
  public final TextView tvMaintDescription;

  @NonNull
  public final TextView tvMaintStatus;

  private ListItemMaintenanceBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialButton btnDeleteMaint, @NonNull MaterialButton btnUpdateMaintStatus,
      @NonNull TextView tvMaintDescription, @NonNull TextView tvMaintStatus) {
    this.rootView = rootView;
    this.btnDeleteMaint = btnDeleteMaint;
    this.btnUpdateMaintStatus = btnUpdateMaintStatus;
    this.tvMaintDescription = tvMaintDescription;
    this.tvMaintStatus = tvMaintStatus;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemMaintenanceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemMaintenanceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item_maintenance, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemMaintenanceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDeleteMaint;
      MaterialButton btnDeleteMaint = ViewBindings.findChildViewById(rootView, id);
      if (btnDeleteMaint == null) {
        break missingId;
      }

      id = R.id.btnUpdateMaintStatus;
      MaterialButton btnUpdateMaintStatus = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdateMaintStatus == null) {
        break missingId;
      }

      id = R.id.tvMaintDescription;
      TextView tvMaintDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvMaintDescription == null) {
        break missingId;
      }

      id = R.id.tvMaintStatus;
      TextView tvMaintStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvMaintStatus == null) {
        break missingId;
      }

      return new ListItemMaintenanceBinding((MaterialCardView) rootView, btnDeleteMaint,
          btnUpdateMaintStatus, tvMaintDescription, tvMaintStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
